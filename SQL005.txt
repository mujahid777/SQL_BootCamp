create database test;

use test;

create table customers
(
    id int,
    name VARCHAR(50)
);

CREATE table orders
(
    order_id int,
    amount int,
    cust_id int
);  

insert into customers values(1, 'Danish');

insert into customers values(2, 'Zubair');

insert into customers values(3, 'Ali');

insert into customers values(4, 'Raza');


insert into orders values(1,100,10);

insert into orders values(2,500,3);

insert into orders values(3,300,6);

insert into orders values(4,800,2 );

insert into orders values(5,350,1); 
 
select * from orders;

--- Get the orders information along with customers full details
--- if ooders amount were than 400

SELECT c.*, o.*
from orders o
inner join customers c on o.cust_id = c.id
where o.amount > 400;

SELECT c.*, o.*
from orders o
inner join customers c on o.cust_id = c.id and o.amount>400;


 # window FUNCTION

 create table shop_sales_data
 (
    sales_date date,
    shop_id varchar(5),
    sales_amount int
 );

insert into shop_sales_data values('2022-02-14', 's1',200);
insert into shop_sales_data values('2022-02-15', 's1',300);
insert into shop_sales_data values('2022-02-14', 's2',600);
insert into shop_sales_data values('2022-02-15', 's3',500);
insert into shop_sales_data values('2022-02-18', 's1',400);
insert into shop_sales_data values('2022-02-17', 's2',250);
insert into shop_sales_data values('2022-02-20', 's3',300);

--- Total sum od sales for each shop using window FUNCTION
--- workinf function - sum(), min(), max(), count(),avg()

select *,
        count(*) over (partition by shop_id) as total_sale_count_by_shops
        from shop_sales_data;


select shop_id, count(*) as total_sale_count_by_shop from shop_sales_data group by shop_id;

# If we only use order by in over clause
select *,
       sum(sales_amount) over(order by sales_amount desc) as total_sum_of_sales
from shop_sales_data;   

# If we use only partition by
select *,
       sum(sales_amount) over(partition  by shop_id) as total_sum_of_sales
from shop_sales_data;  

# If we use only partition by & order by together
select *,
       sum(sales_amount) over(partition  by shop_id order by sales_amount desc) as total_sum_of_sales
from shop_sales_data;

CREATE table amazon_sales_data
(
    sales_date date,
    sales_amount int
);

insert into amazon_sales_data values('2011-08-21', 500);
insert into amazon_sales_data values('2011-08-22', 600);
insert into amazon_sales_data values('2011-08-19', 300);
insert into amazon_sales_data values('2011-08-18', 200); 
insert into amazon_sales_data values('2011-08-25', 800);

--- Query- calculate the date wise rolling sum of amazon sales


select *,
       avg(sales_amount) over(order by sales_date  ) as rolling_avg
from amazon_sales_data;  

select *,
       avg(sales_amount) over(order by sales_date  ) as rolling_avg,
       sum(sales_amount) over(order by sales_date  ) as rolling_sum
from amazon_sales_data;


# rank(), Row_Number(), Dense() window FUNCTION


insert into shop_sales_data values('2022-02-19', 's1',400);
insert into shop_sales_data values('2022-02-20', 's1',400);
insert into shop_sales_data values('2022-02-22', 's2',300);
insert into shop_sales_data values('2022-02-25', 's1',200);
insert into shop_sales_data values('2022-02-15', 's2',600);
insert into shop_sales_data values('2022-02-16', 's2',600);
insert into shop_sales_data values('2022-02-16', 's3',500);
insert into shop_sales_data values('2022-02-18', 's3',500);
insert into shop_sales_data values('2022-02-19', 's3',300);

select * from shop_sales_data;

select *,
       row_number() over(partition by shop_id order by sales_amount desc) as row_num,
       rank() over(partition by shop_id order by sales_amount desc) as ranl_val,
       DENSE_RANK() over(partition by shop_id order by sales_amount desc) as dense_rank_val
from shop_sales_data;      


create table employees
(
    emp_id int,
    salary int,
    dept_name VARCHAR(50)
);

insert into employees values(1, 100000, 'software');
insert into employees values(2, 110000, 'software');
insert into employees values(3, 110000, 'software');
insert into employees values(4, 110000, 'software');
insert into employees values(5, 150000, 'finance');
insert into employees values(6, 150000, 'finance');
insert into employees values(7, 120000, 'IT');
insert into employees values(8, 120000, 'HR');
insert into employees values(9, 120000, 'HR');
insert into employees values(10, 110000, 'HR');

select * from employees;
