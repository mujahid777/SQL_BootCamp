CREATE DATABASE test;

use test;

create table orders_data
(
cust_id int,
order_id int,
country varchar(50),
state varchar(50)
);

insert into orders_data values(1, 100, 'USA', 'Seattle');
insert into orders_data values(2, 101, 'INDIA', 'UP');
insert into orders_data values(2, 103, 'INDIA', 'Bihar');
insert into orders_data values(4, 108, 'USA', 'WDC');
insert into orders_data values(5, 109, 'UK', 'London');
insert into orders_data values(4, 110, 'USA', 'WDC');
insert into orders_data values(3, 120, 'INDIA', 'AP');
insert into orders_data values(2, 121, 'INDIA', 'Goa');
insert into orders_data values(1, 131, 'USA', 'Seattle');
insert into orders_data values(6, 142, 'USA', 'Seattle');
insert into orders_data values(7, 150, 'USA', 'Seattle');

SELECT * from orders_data;

--- Use of Having clause
--- write a query to find the country where only 1 order was placed
select country from orders_data group by country Having count(*)=1;

--- Where clause and group by clause -> what should be the proper sequence?
--- Answer -> where clause and then group BY

--- How to use GROUP_CONCAT
--- Query -> Write a query to print DISTINCT states present in the dataset for each country

SELECT country, GROUP_CONCAT(state) as states_in_country from orders_data group by country;
SELECT country, GROUP_CONCAT(distinct state) as states_in_country from orders_data group by country;

SELECT country, GROUP_CONCAT(distinct state order by state desc) as states_in_country from orders_data group by country;

SELECT country, GROUP_CONCAT(distinct state order by state desc SEPARATOR '_') as states_in_country from orders_data group by country;

SELECT country, GROUP_CONCAT(distinct state order by state desc SEPARATOR '  -  ') as states_in_country from orders_data group by country;

--- subqueries 
CREATE table employees
(
    id int,
    name VARCHAR(50), 
    salary int
);

insert into employees values(1, 'mujahid', 5000), (2, 'raza', 5500), (3, 'ayyub', 6000), (4, 'danish', 7000), (5, 'ali', 6500), (6, 'zesu', 7500);

select * from employees;

--- Write a query to print all those employee records who are getting more salary then "ali"
--- wrong way -> select salary from employees where salary > 6500;

select * from employees where salary > (select salary from employees where name= 'ali');


--- Use of IN and NOT IN
--- Write a query to print all the orders which were placed in 'seattle' or 'Goa'

--- wrong way ->  select * from orders_data where state = 'Seattle' or state 'Goa';

select * from orders_data where state in ('Seattle', 'Goa'); 

CREATE table customer_order_data
(
    order_id int,
    cust_id int,
    supplier_id int,
    cust_country VARCHAR(50)
);

insert into customer_order_data values(101,200,300,'USA'),(102,201,301,'INDIA'),(103,202,302,'USA'),(104,203,303,'UK');

CREATE TABLE supplier_data
(
    supplier_id int,
    sup_country VARCHAR(50)
);

insert into supplier_data values(300,'USA'),(303,'UK');

--- Write a query to find all customer order data where all customers are from same countries as tha supplier 
select * from customer_order_data where cust_country in (select distinct sup_country from supplier_data);



CREATE table student_marks
(
    stu_id int,
    stu_name VARCHAR(50),
    total_marks int
);

insert into student_marks values(1, 'mujahid', 50);
insert into student_marks values(2, 'raza', 91);
insert into student_marks values(3, 'ayyub', 74);
insert into student_marks values(4, 'aamir', 65);
insert into student_marks values(5, 'ali', 86);
insert into student_marks values(6, 'danish', 77);

--- Write a query to calculate the grade for a  student by following below criteria
# marks >= 90, grade A+
# marks < 90 and marks >= 85, grade A
# marks < 85 and marks >= 75, grade B+
# marks < 75 and marks >= 60, grade B
# marks < 60 grade C

select stu_id,
       stu_name,
       total_marks,
       CASE 
        WHEN total_marks >= 90 THEN 'A+'
        WHEN total_marks >= 85 and total_marks < 90 THEN 'A'
        WHEN total_marks >= 75 and total_marks < 85 THEN 'B+'
        WHEN total_marks >= 60 and total_marks < 75 THEN 'B'
        ELSE  'C'
       END as Grade
from student_marks;     

--- Uber SQL interview question

create table tree
(
    node int,
    parent int
);

insert into tree values (5,8),(9,8),(4,5),(2,9),(1,5),(3,9),(8,null);

select * from tree;

select node,
       CASE 
        WHEN node not in (select distinct parent from tree where parent is not null) THEN  "LEAF"
        when parent is null then 'ROOT'
        ELSE 'INNER'  
       END as node_type
 from tree;  

 --- Example for Case when with group by -> Amozon SQL Question

 create table transactions
 (
    trx_date Date,
    merchant_id VARCHAR(10),
    amount int,
    payment_mode VARCHAR(10)
 );

 insert into transactions values ('2022-04-02', 'm1', 150, 'CASH');
 insert into transactions values ('2022-04-02', 'm1', 500, 'ONLINE');
 insert into transactions values ('2022-04-03', 'm2', 450, 'ONLINE');
 insert into transactions values ('2022-04-03', 'm1', 100, 'CASH');
 insert into transactions values ('2022-04-03', 'm3', 600, 'CASH');
 insert into transactions values ('2022-04-05', 'm5', 200, 'ONLINE');
 insert into transactions values ('2022-04-05', 'm2', 100, 'ONLINE');

 select * from transactions;

 select merchant_id,
            sum(case when payment_mode = 'CASH' then amount else 0 end) as cash_amount,
            sum(case when payment_mode = 'ONLINE' then amount else 0 end) as online_amount
from transactions
group by merchant_id;

--- Example for JOIN
CREATE table orders
(
    order_id int,
    cust_id int,
    ord_date date,
    shipper_id int
);

CREATE table customers
(
    cust_id int,
    cust_name VARCHAR(50),
    country VARCHAR(50)
);

create table shippers
(
    ship_id int,
    ship_name VARCHAR(50)
);

insert into orders values(10308, 2, '2011-09-15', 3);
insert into orders values(10309, 30, '2011-09-16', 1);
insert into orders values(10310, 41, '2011-09-19', 2);

insert into customers values(1, 'Shah', 'INDIA');
insert into customers values(2, 'Rukh', 'USA');
insert into customers values(3, 'Khan', 'UK');

insert into shippers value(3,'abc');
insert into shippers value(1,'xyz');

select * from orders;
select * from customers;

--- Perform inner JOIN
--- Get the customer information for each order , if the value of customer id present in the order table
SELECT
o.*, c.*
from orders o
inner join customers c on o.cust_id = c.cust_id;

--- perform Left join
SELECT
o.*, c.*
from orders o
left join customers c on o.cust_id = c.cust_id;

--- perform Right join
SELECT
o.*, c.*
from orders o
right join customers c on o.cust_id = c.cust_id;

--- perform cross join
SELECT
o.*, c.*
from orders o
cross join customers c on o.cust_id = c.cust_id;


--- how to join more than 2 datasets
--- Perform inner JOIN
--- Get the customer information for each order , if the value of customer id present in the order table
--- Also get the infornation of shipper name
SELECT
o.*, c.*, s.*
from orders o
inner join customers c on o.cust_id = c.cust_id
inner join shippers s on o.shipper_id = s.ship_id;

CREATE TABLE employees_full_data
(
    imp_id int,
    name VARCHAR(50),
    mgr_id int
);

insert into employees_full_data values(1, "Raza", 3);
insert into employees_full_data values(2, "Ahmad", 3);
insert into employees_full_data values(3, "khan", 4);
insert into employees_full_data values(4, "Ansari", 6);
insert into employees_full_data values(6, "pathan", null);

select * from employees_full_data;

--- write a query to print the distinct name of managers??
